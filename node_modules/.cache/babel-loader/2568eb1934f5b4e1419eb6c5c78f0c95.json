{"ast":null,"code":"import { TinyColor, readability, isReadable, random } from \"@ctrl/tinycolor\";\nimport { memoizedGet as get, isEmptyObject } from \"@chakra-ui/utils\";\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\n\nexport var getColor = (theme, color, fallback) => {\n  var hex = get(theme, \"colors.\" + color, color);\n  var {\n    isValid\n  } = new TinyColor(hex);\n  return isValid ? hex : fallback;\n};\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var tone = color => theme => {\n  var hex = getColor(theme, color);\n  var isDark = new TinyColor(hex).isDark();\n  return isDark ? \"dark\" : \"light\";\n};\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isDark = color => theme => tone(color)(theme) === \"dark\";\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isLight = color => theme => tone(color)(theme) === \"light\";\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n */\n\nexport var transparentize = (color, opacity) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).setAlpha(opacity).toRgbString();\n};\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n */\n\nexport var whiten = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).mix(\"#fff\", amount).toHexString();\n};\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n */\n\nexport var blacken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).mix(\"#000\", amount).toHexString();\n};\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n */\n\nexport var darken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).darken(amount).toHexString();\n};\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n */\n\nexport var lighten = (color, amount) => theme => new TinyColor(getColor(theme, color)).lighten(amount).toHexString();\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var contrast = (fg, bg) => theme => readability(getColor(theme, bg), getColor(theme, fg));\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var isAccessible = (textColor, bgColor, options) => theme => isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\nexport var complementary = color => theme => new TinyColor(getColor(theme, color)).complement().toHexString();\nexport function generateStripe(size, color) {\n  if (size === void 0) {\n    size = \"1rem\";\n  }\n\n  if (color === void 0) {\n    color = \"rgba(255, 255, 255, 0.15)\";\n  }\n\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \" + color + \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \" + color + \" 50%,\\n    \" + color + \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\",\n    backgroundSize: size + \" \" + size\n  };\n}\nexport function randomColor(opts) {\n  var fallback = random().toHexString();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  var color = \"#\";\n\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}","map":{"version":3,"sources":["../../src/color.ts"],"names":["memoizedGet","getColor","hex","get","isValid","tone","color","theme","isDark","isLight","transparentize","raw","whiten","blacken","darken","lighten","contrast","readability","isAccessible","isReadable","complementary","size","backgroundImage","backgroundSize","fallback","random","isEmptyObject","opts","randomColorFromList","randomColorFromString","randomFromList","hash","str","i","j","value","index","list","Math"],"mappings":"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","sourcesContent":["import {\n  TinyColor,\n  readability,\n  isReadable,\n  random,\n  WCAG2Parms,\n} from \"@ctrl/tinycolor\"\nimport { memoizedGet as get, Dict, isEmptyObject } from \"@chakra-ui/utils\"\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  const { isValid } = new TinyColor(hex)\n  return isValid ? hex : fallback\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const isDark = new TinyColor(hex).isDark()\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n */\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict,\n) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).setAlpha(opacity).toRgbString()\n}\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).mix(\"#fff\", amount).toHexString()\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).mix(\"#000\", amount).toHexString()\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).darken(amount).toHexString()\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) =>\n  new TinyColor(getColor(theme, color)).lighten(amount).toHexString()\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  readability(getColor(theme, bg), getColor(theme, fg))\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const isAccessible = (\n  textColor: string,\n  bgColor: string,\n  options?: WCAG2Parms,\n) => (theme: Dict) =>\n  isReadable(getColor(theme, bgColor), getColor(theme, textColor), options)\n\nexport const complementary = (color: string) => (theme: Dict) =>\n  new TinyColor(getColor(theme, color)).complement().toHexString()\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = random().toHexString()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n"]},"metadata":{},"sourceType":"module"}