{"ast":null,"code":"import { makeAutoObservable, reaction } from \"mobx\";\nimport api from \"../services/API\";\nexport class Store {\n  constructor() {\n    this.searchDisposer = void 0;\n    this.searchDisposeSearch = void 0;\n    this.chooseA = 0;\n    this.movies = [];\n    this.loading = false;\n    this.search = '';\n\n    this.fetchMovies = async () => {\n      if (this.loading) {\n        return;\n      }\n\n      ;\n      this.setLoading(true);\n\n      try {\n        const movies = await api.getMovies(this.search);\n        this.setMovies(movies);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.setLoading(false);\n      }\n\n      ;\n    };\n\n    makeAutoObservable(this);\n    this.searchDisposer = reaction(() => this.search, () => this.fetchMovies());\n    this.searchDisposeSearch = reaction(() => this.isSearch, isSearch => {\n      if (isSearch) {\n        console.log(\"BOA ESCOLHA MEU BOM!\");\n        this.chooseA = this.chooseA + 1;\n      }\n    });\n  }\n\n  setSearch(search) {\n    this.search = search;\n  }\n\n  setMovies(movies) {\n    this.movies = movies;\n  }\n\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n  dispose() {\n    var _this$searchDisposer;\n\n    (_this$searchDisposer = this.searchDisposer) === null || _this$searchDisposer === void 0 ? void 0 : _this$searchDisposer.call(this);\n  }\n\n  disposesearch() {\n    var _this$searchDisposeSe;\n\n    (_this$searchDisposeSe = this.searchDisposeSearch) === null || _this$searchDisposeSe === void 0 ? void 0 : _this$searchDisposeSe.call(this);\n  }\n\n  get top5Movies() {\n    return this.movies.slice().sort((l, r) => l.popularity - r.popularity).slice(0, 4);\n  }\n\n  get OrderMovies() {\n    return this.top5Movies.slice().sort((a, b) => {\n      return a.title < b.title ? -1 : a.title > b.title ? 1 : 0;\n    });\n  }\n\n  get adult() {\n    return this.movies.filter(movie => movie.adult);\n  }\n\n  get isSearch() {\n    return this.search.includes(\"Batman\");\n  }\n\n}\n;","map":{"version":3,"sources":["/home/manoel/Codigos/treinamento/aulas/05/startmovieswithmobex/src/Home/store.ts"],"names":["makeAutoObservable","reaction","api","Store","constructor","searchDisposer","searchDisposeSearch","chooseA","movies","loading","search","fetchMovies","setLoading","getMovies","setMovies","e","console","error","isSearch","log","setSearch","dispose","disposesearch","top5Movies","slice","sort","l","r","popularity","OrderMovies","a","b","title","adult","filter","movie","includes"],"mappings":"AAAA,SAASA,kBAAT,EAAgDC,QAAhD,QAAgE,MAAhE;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,MAAMC,KAAN,CAAY;AAGfC,EAAAA,WAAW,GAAG;AAAA,SAFPC,cAEO;AAAA,SADPC,mBACO;AAAA,SAgBPC,OAhBO,GAgBG,CAhBH;AAAA,SAiBPC,MAjBO,GAiBiB,EAjBjB;AAAA,SAkBPC,OAlBO,GAkBY,KAlBZ;AAAA,SAmBPC,MAnBO,GAmBU,EAnBV;;AAAA,SA+BPC,WA/BO,GA+BO,YAAY;AAC7B,UAAI,KAAKF,OAAT,EAAkB;AACd;AACH;;AAAA;AACD,WAAKG,UAAL,CAAgB,IAAhB;;AAEA,UAAI;AACA,cAAMJ,MAAM,GAAG,MAAMN,GAAG,CAACW,SAAJ,CAAc,KAAKH,MAAnB,CAArB;AACA,aAAKI,SAAL,CAAeN,MAAf;AACH,OAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,OALD,SAKU;AACN,aAAKH,UAAL,CAAgB,KAAhB;AACH;;AAAA;AACJ,KA7Ca;;AACVZ,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA,SAAKK,cAAL,GAAsBJ,QAAQ,CAC1B,MAAM,KAAKS,MADe,EAE1B,MAAM,KAAKC,WAAL,EAFoB,CAA9B;AAIA,SAAKL,mBAAL,GAA2BL,QAAQ,CAC/B,MAAM,KAAKiB,QADoB,EAE/BA,QAAQ,IAAI;AACR,UAAIA,QAAJ,EAAc;AACVF,QAAAA,OAAO,CAACG,GAAR,CAAY,sBAAZ;AACA,aAAKZ,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACH;AACJ,KAP8B,CAAnC;AASH;;AAKMa,EAAAA,SAAS,CAACV,MAAD,EAAiB;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACMI,EAAAA,SAAS,CAACN,MAAD,EAAwB;AACpC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEMI,EAAAA,UAAU,CAACH,OAAD,EAAmB;AAChC,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAiBMY,EAAAA,OAAO,GAAG;AAAA;;AACb,iCAAKhB,cAAL;AACH;;AACMiB,EAAAA,aAAa,GAAE;AAAA;;AAClB,kCAAKhB,mBAAL;AACH;;AACoB,MAAViB,UAAU,GAAG;AACpB,WAAO,KAAKf,MAAL,CACFgB,KADE,GAEFC,IAFE,CAEG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,UAAF,GAAeD,CAAC,CAACC,UAF9B,EAGFJ,KAHE,CAGI,CAHJ,EAGO,CAHP,CAAP;AAIH;;AACqB,MAAXK,WAAW,GAAG;AACrB,WAAO,KAAKN,UAAL,CAAgBC,KAAhB,GAAwBC,IAAxB,CAA6B,CAACK,CAAD,EAAIC,CAAJ,KAAU;AAC1C,aAAOD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAAC,CAArB,GAAyBF,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAxD;AACH,KAFM,CAAP;AAGH;;AACe,MAALC,KAAK,GAAG;AACf,WAAO,KAAKzB,MAAL,CAAY0B,MAAZ,CAAoBC,KAAD,IAAwBA,KAAK,CAACF,KAAjD,CAAP;AACH;;AAEkB,MAARf,QAAQ,GAAG;AAClB,WAAO,KAAKR,MAAL,CAAY0B,QAAZ,CAAqB,QAArB,CAAP;AACH;;AAxEc;AAyElB","sourcesContent":["import { makeAutoObservable, IReactionDisposer, reaction } from \"mobx\";\nimport * as types from '../declarations/types';\nimport api from \"../services/API\";\n\nexport class Store {\n    public searchDisposer: IReactionDisposer;\n    public searchDisposeSearch: IReactionDisposer;\n    constructor() {\n        makeAutoObservable(this);\n        this.searchDisposer = reaction(\n            () => this.search,\n            () => this.fetchMovies(),\n        );\n        this.searchDisposeSearch = reaction(\n            () => this.isSearch,\n            isSearch => {\n                if (isSearch) {\n                    console.log(\"BOA ESCOLHA MEU BOM!\");\n                    this.chooseA = this.chooseA + 1;\n                }\n            }\n        );\n    };\n    public chooseA = 0;\n    public movies: types.Movie[] = [];\n    public loading: boolean = false;\n    public search: string = '';\n    public setSearch(search: string) {\n        this.search = search;\n    };\n    public setMovies(movies: types.Movie[]) {\n        this.movies = movies;\n    };\n\n    public setLoading(loading: boolean) {\n        this.loading = loading;\n    };\n\n    public fetchMovies = async () => {\n        if (this.loading) {\n            return;\n        };\n        this.setLoading(true);\n\n        try {\n            const movies = await api.getMovies(this.search);\n            this.setMovies(movies);\n        } catch (e) {\n            console.error(e);\n        } finally {\n            this.setLoading(false);\n        };\n    };\n    public dispose() {\n        this.searchDisposer?.();\n    }\n    public disposesearch(){\n        this.searchDisposeSearch?.();\n    }\n    public get top5Movies() {\n        return this.movies\n            .slice()\n            .sort((l, r) => l.popularity - r.popularity)\n            .slice(0, 4);\n    }\n    public get OrderMovies() {\n        return this.top5Movies.slice().sort((a, b) => {\n            return a.title < b.title ? -1 : a.title > b.title ? 1 : 0;\n        })\n    }\n    public get adult() {\n        return this.movies.filter((movie: types.Movie) => movie.adult)\n    }\n\n    public get isSearch() {\n        return this.search.includes(\"Batman\")\n    }\n};"]},"metadata":{},"sourceType":"module"}