{"ast":null,"code":"var logicals = {\n  \"start-start\": {\n    ltr: \"left-start\",\n    rtl: \"right-start\"\n  },\n  \"start-end\": {\n    ltr: \"left-end\",\n    rtl: \"right-end\"\n  },\n  \"end-start\": {\n    ltr: \"right-start\",\n    rtl: \"left-start\"\n  },\n  \"end-end\": {\n    ltr: \"right-end\",\n    rtl: \"left-end\"\n  },\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\nvar opposites = {\n  \"auto-start\": \"auto-end\",\n  \"auto-end\": \"auto-start\",\n  \"top-start\": \"top-end\",\n  \"top-end\": \"top-start\",\n  \"bottom-start\": \"bottom-end\",\n  \"bottom-end\": \"bottom-start\"\n};\nexport function getPopperPlacement(placement, dir) {\n  var _logicals$placement, _opposites$placement;\n\n  if (dir === void 0) {\n    dir = \"ltr\";\n  }\n\n  var value = ((_logicals$placement = logicals[placement]) == null ? void 0 : _logicals$placement[dir]) || placement;\n  if (dir === \"ltr\") return value;\n  return (_opposites$placement = opposites[placement]) != null ? _opposites$placement : value;\n}","map":{"version":3,"sources":["../../src/popper.placement.ts"],"names":["logicals","ltr","rtl","start","end","opposites","dir","value"],"mappings":"AAcA,IAAMA,QAA6D,GAAG;AACpE,iBAAe;AAAEC,IAAAA,GAAG,EAAL,YAAA;AAAqBC,IAAAA,GAAG,EAAE;AAA1B,GADqD;AAEpE,eAAa;AAAED,IAAAA,GAAG,EAAL,UAAA;AAAmBC,IAAAA,GAAG,EAAE;AAAxB,GAFuD;AAGpE,eAAa;AAAED,IAAAA,GAAG,EAAL,aAAA;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAHuD;AAIpE,aAAW;AAAED,IAAAA,GAAG,EAAL,WAAA;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAJyD;AAKpEC,EAAAA,KAAK,EAAE;AAAEF,IAAAA,GAAG,EAAL,MAAA;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAL6D;AAMpEE,EAAAA,GAAG,EAAE;AAAEH,IAAAA,GAAG,EAAL,OAAA;AAAgBC,IAAAA,GAAG,EAAE;AAArB;AAN+D,CAAtE;AASA,IAAMG,SAAgD,GAAG;AACvD,gBADuD,UAAA;AAEvD,cAFuD,YAAA;AAGvD,eAHuD,SAAA;AAIvD,aAJuD,WAAA;AAKvD,kBALuD,YAAA;AAMvD,gBAAc;AANyC,CAAzD;AASA,OAAO,SAAA,kBAAA,CAAA,SAAA,EAAA,GAAA,EAGM;AAAA,MAAA,mBAAA,EAAA,oBAAA;;AAAA,MADXC,GACW,KAAA,KAAA,CAAA,EAAA;AADXA,IAAAA,GACW,GADU,KAArBA;AACW;;AACX,MAAMC,KAAK,GAAI,CAAA,CAAA,mBAAA,GAAA,QAAQ,CAAR,SAAQ,CAAR,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,GAAA,CAAA,KAAf,SAAA;AACA,MAAID,GAAG,KAAP,KAAA,EAAmB,OAAA,KAAA;AACnB,SAAA,CAAA,oBAAA,GAAOD,SAAS,CAAhB,SAAgB,CAAhB,KAAA,IAAA,GAAA,oBAAA,GAAA,KAAA;AACD","sourcesContent":["import type { Placement } from \"@popperjs/core\"\n\ntype Logical =\n  | \"start-start\"\n  | \"start-end\"\n  | \"end-start\"\n  | \"end-end\"\n  | \"start\"\n  | \"end\"\n\ntype PlacementWithLogical = Placement | Logical\n\nexport type { Placement, PlacementWithLogical }\n\nconst logicals: Record<Logical, { ltr: Placement; rtl: Placement }> = {\n  \"start-start\": { ltr: \"left-start\", rtl: \"right-start\" },\n  \"start-end\": { ltr: \"left-end\", rtl: \"right-end\" },\n  \"end-start\": { ltr: \"right-start\", rtl: \"left-start\" },\n  \"end-end\": { ltr: \"right-end\", rtl: \"left-end\" },\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nconst opposites: Partial<Record<Placement, Placement>> = {\n  \"auto-start\": \"auto-end\",\n  \"auto-end\": \"auto-start\",\n  \"top-start\": \"top-end\",\n  \"top-end\": \"top-start\",\n  \"bottom-start\": \"bottom-end\",\n  \"bottom-end\": \"bottom-start\",\n}\n\nexport function getPopperPlacement(\n  placement: PlacementWithLogical,\n  dir: \"ltr\" | \"rtl\" = \"ltr\",\n): Placement {\n  const value = (logicals[placement]?.[dir] || placement) as Placement\n  if (dir === \"ltr\") return value\n  return opposites[placement] ?? value\n}\n"]},"metadata":{},"sourceType":"module"}