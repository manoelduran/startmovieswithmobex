{"ast":null,"code":"import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\n\nexport function useImage(props) {\n  var {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  var [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(() => {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  var flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}","map":{"version":3,"sources":["../../src/use-image.ts"],"names":["ignoreFallback","useState","useEffect","setStatus","src","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","onError","useSafeLayoutEffect","status"],"mappings":"AAAA,SAAA,mBAAA,QAAA,kBAAA;AACA,SAAA,WAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,QAAA,CAAA,KAAA,EAAwC;AAC7C,MAAM;AAAA,IAAA,OAAA;AAAA,IAAA,GAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,OAAA;AAAA,IAAA,WAAA;AAAA,IAAA,KAAA;AAQJA,IAAAA;AARI,MAAN,KAAA;AAWA,MAAM,CAAA,MAAA,EAAA,SAAA,IAAsBC,QAAQ,CAApC,SAAoC,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,SAAS,CAACC,GAAG,GAAA,SAAA,GAAbD,SAAS,CAATA;AADO,GAAA,EAEN,CAFHD,GAEG,CAFM,CAATA;AAIA,MAAMG,QAAQ,GAAGC,MAAjB,EAAA;AAEA,MAAMC,IAAI,GAAGC,WAAW,CAAC,MAAM;AAC7B,QAAI,CAAJ,GAAA,EAAU;AAEVC,IAAAA,KAAK;AAEL,QAAMC,GAAG,GAAG,IAAZ,KAAY,EAAZ;AACAA,IAAAA,GAAG,CAAHA,GAAAA,GAAAA,GAAAA;AACA,QAAA,WAAA,EAAiBA,GAAG,CAAHA,WAAAA,GAAAA,WAAAA;AACjB,QAAA,MAAA,EAAYA,GAAG,CAAHA,MAAAA,GAAAA,MAAAA;AACZ,QAAA,KAAA,EAAWA,GAAG,CAAHA,KAAAA,GAAAA,KAAAA;AACX,QAAA,OAAA,EAAaA,GAAG,CAAHA,OAAAA,GAAAA,OAAAA;;AAEbA,IAAAA,GAAG,CAAHA,MAAAA,GAAcC,KAAD,IAAW;AACtBF,MAAAA,KAAK;AACLN,MAAAA,SAAS,CAATA,QAAS,CAATA;AACAS,MAAAA,MAAM,IAANA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAANA,KAAM,CAANA;AAHFF,KAAAA;;AAKAA,IAAAA,GAAG,CAAHA,OAAAA,GAAeG,KAAD,IAAW;AACvBJ,MAAAA,KAAK;AACLN,MAAAA,SAAS,CAATA,QAAS,CAATA;AACAW,MAAAA,OAAO,IAAPA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAPA,KAAO,CAAPA;AAHFJ,KAAAA;;AAMAL,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,GAAAA;AAvBsB,GAAA,EAwBrB,CAAA,GAAA,EAAA,WAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAxBH,OAwBG,CAxBqB,CAAxB;;AA0BA,MAAMI,KAAK,GAAG,MAAM;AAClB,QAAIJ,QAAQ,CAAZ,OAAA,EAAsB;AACpBA,MAAAA,QAAQ,CAARA,OAAAA,CAAAA,MAAAA,GAAAA,IAAAA;AACAA,MAAAA,QAAQ,CAARA,OAAAA,CAAAA,OAAAA,GAAAA,IAAAA;AACAA,MAAAA,QAAQ,CAARA,OAAAA,GAAAA,IAAAA;AACD;AALH,GAAA;;AAQAU,EAAAA,mBAAmB,CAAC,MAAM;AACxB;AACJ;AACA;AACA;AACI,QAAA,cAAA,EAAoB,OAAA,SAAA;;AAEpB,QAAIC,MAAM,KAAV,SAAA,EAA0B;AACxBT,MAAAA,IAAI;AACL;;AACD,WAAO,MAAM;AACXE,MAAAA,KAAK;AADP,KAAA;AAViB,GAAA,EAahB,CAAA,MAAA,EAAA,IAAA,EAbHM,cAaG,CAbgB,CAAnBA;AAeA;AACF;AACA;AACA;;AACE,SAAOf,cAAc,GAAA,QAAA,GAArB,MAAA;AACD","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\ntype NativeImageProps = ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"]},"metadata":{},"sourceType":"module"}