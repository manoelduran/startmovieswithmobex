{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nvar placementMap = {\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\n\nfunction getDrawerPlacement(placement, dir) {\n  var _placementMap$placeme, _placementMap$placeme2;\n\n  if (!placement) return;\n  return (_placementMap$placeme = (_placementMap$placeme2 = placementMap[placement]) == null ? void 0 : _placementMap$placeme2[dir]) != null ? _placementMap$placeme : placement;\n}\n\nexport function Drawer(props) {\n  var _theme$components;\n\n  var {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  var placement = getDrawerPlacement(placementProp, theme.direction);\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyledSlide = chakra(Slide);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var DrawerContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var {\n    placement\n  } = useDrawerContext();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyledSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\n\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";","map":{"version":3,"sources":["../../src/drawer.tsx"],"names":["createContext","placementMap","start","ltr","rtl","end","placement","placementProp","children","rest","theme","useTheme","drawerStyleConfig","getDrawerPlacement","StyledSlide","chakra","DrawerContent","forwardRef","isOpen","useModalContext","dialogProps","getDialogProps","containerProps","getDialogContainerProps","_className","cx","styles","useStyles","dialogStyles","display","flexDirection","position","width","outline","dialogContainerStyles","height","left","top","useDrawerContext","ModalBody","ModalCloseButton","ModalFooter","ModalHeader","ModalOverlay"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(placement: DrawerPlacement, dir: \"ltr\" | \"rtl\") {\n  if (!placement) return\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    Omit<ModalProps, \"scrollBehavior\" | \"motionPreset\" | \"isCentered\"> {}\n\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyledSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyledSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyledSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"]},"metadata":{},"sourceType":"module"}