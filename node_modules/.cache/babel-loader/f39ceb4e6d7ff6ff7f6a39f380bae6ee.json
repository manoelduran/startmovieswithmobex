{"ast":null,"code":"import { makeAutoObservable, reaction } from \"mobx\";\nimport api from \"../services/API\";\nexport class Store {\n  constructor() {\n    this.searchDisposer = void 0;\n    this.chooseA = 0;\n    this.movies = [];\n    this.loading = false;\n    this.search = '';\n\n    this.fetchMovies = async () => {\n      if (this.loading) {\n        return;\n      }\n\n      ;\n      this.setLoading(true);\n\n      try {\n        const movies = await api.getMovies(this.search);\n        this.setMovies(movies);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.setLoading(false);\n      }\n\n      ;\n    };\n\n    makeAutoObservable(this);\n    this.searchDisposer = reaction(() => this.search, () => this.fetchMovies());\n  }\n\n  setSearch(search) {\n    this.search = search;\n  }\n\n  setMovies(movies) {\n    this.movies = movies;\n  }\n\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n  dispose() {\n    var _this$searchDisposer;\n\n    (_this$searchDisposer = this.searchDisposer) === null || _this$searchDisposer === void 0 ? void 0 : _this$searchDisposer.call(this);\n  }\n\n  get top5Movies() {\n    return this.movies.slice().sort((l, r) => l.popularity - r.popularity).slice(0, 4);\n  }\n\n  get OrderMovies() {\n    return this.top5Movies.slice().sort((a, b) => {\n      return a.title < b.title ? -1 : a.title > b.title ? 1 : 0;\n    });\n  }\n\n  get adult() {\n    return this.movies.filter(movie => movie.adult);\n  }\n\n  get isSearch() {\n    return this.search.includes(\"Batman\");\n  }\n\n}\n;","map":{"version":3,"sources":["/home/manoel/Codigos/treinamento/aulas/05/startmovieswithmobex/src/Home/store.ts"],"names":["makeAutoObservable","reaction","api","Store","constructor","searchDisposer","chooseA","movies","loading","search","fetchMovies","setLoading","getMovies","setMovies","e","console","error","setSearch","dispose","top5Movies","slice","sort","l","r","popularity","OrderMovies","a","b","title","adult","filter","movie","isSearch","includes"],"mappings":"AAAA,SAASA,kBAAT,EAAgDC,QAAhD,QAAgE,MAAhE;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,MAAMC,KAAN,CAAY;AAEfC,EAAAA,WAAW,GAAG;AAAA,SADPC,cACO;AAAA,SAQPC,OARO,GAQG,CARH;AAAA,SASPC,MATO,GASiB,EATjB;AAAA,SAUPC,OAVO,GAUY,KAVZ;AAAA,SAWPC,MAXO,GAWU,EAXV;;AAAA,SAuBPC,WAvBO,GAuBO,YAAY;AAC7B,UAAI,KAAKF,OAAT,EAAkB;AACd;AACH;;AAAA;AACD,WAAKG,UAAL,CAAgB,IAAhB;;AAEA,UAAI;AACA,cAAMJ,MAAM,GAAG,MAAML,GAAG,CAACU,SAAJ,CAAc,KAAKH,MAAnB,CAArB;AACA,aAAKI,SAAL,CAAeN,MAAf;AACH,OAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,OALD,SAKU;AACN,aAAKH,UAAL,CAAgB,KAAhB;AACH;;AAAA;AACJ,KArCa;;AACVX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA,SAAKK,cAAL,GAAsBJ,QAAQ,CAC1B,MAAM,KAAKQ,MADe,EAE1B,MAAM,KAAKC,WAAL,EAFoB,CAA9B;AAKH;;AAKMO,EAAAA,SAAS,CAACR,MAAD,EAAiB;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACMI,EAAAA,SAAS,CAACN,MAAD,EAAwB;AACpC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEMI,EAAAA,UAAU,CAACH,OAAD,EAAmB;AAChC,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAiBMU,EAAAA,OAAO,GAAG;AAAA;;AACb,iCAAKb,cAAL;AACH;;AAEoB,MAAVc,UAAU,GAAG;AACpB,WAAO,KAAKZ,MAAL,CACFa,KADE,GAEFC,IAFE,CAEG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,UAAF,GAAeD,CAAC,CAACC,UAF9B,EAGFJ,KAHE,CAGI,CAHJ,EAGO,CAHP,CAAP;AAIH;;AACqB,MAAXK,WAAW,GAAG;AACrB,WAAO,KAAKN,UAAL,CAAgBC,KAAhB,GAAwBC,IAAxB,CAA6B,CAACK,CAAD,EAAIC,CAAJ,KAAU;AAC1C,aAAOD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAAC,CAArB,GAAyBF,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAxD;AACH,KAFM,CAAP;AAGH;;AACe,MAALC,KAAK,GAAG;AACf,WAAO,KAAKtB,MAAL,CAAYuB,MAAZ,CAAoBC,KAAD,IAAwBA,KAAK,CAACF,KAAjD,CAAP;AACH;;AAEkB,MAARG,QAAQ,GAAG;AAClB,WAAO,KAAKvB,MAAL,CAAYwB,QAAZ,CAAqB,QAArB,CAAP;AACH;;AA7Dc;AA8DlB","sourcesContent":["import { makeAutoObservable, IReactionDisposer, reaction } from \"mobx\";\nimport * as types from '../declarations/types';\nimport api from \"../services/API\";\n\nexport class Store {\n    public searchDisposer: IReactionDisposer;\n    constructor() {\n        makeAutoObservable(this);\n        this.searchDisposer = reaction(\n            () => this.search,\n            () => this.fetchMovies(),\n        );\n \n    };\n    public chooseA = 0;\n    public movies: types.Movie[] = [];\n    public loading: boolean = false;\n    public search: string = '';\n    public setSearch(search: string) {\n        this.search = search;\n    };\n    public setMovies(movies: types.Movie[]) {\n        this.movies = movies;\n    };\n\n    public setLoading(loading: boolean) {\n        this.loading = loading;\n    };\n\n    public fetchMovies = async () => {\n        if (this.loading) {\n            return;\n        };\n        this.setLoading(true);\n\n        try {\n            const movies = await api.getMovies(this.search);\n            this.setMovies(movies);\n        } catch (e) {\n            console.error(e);\n        } finally {\n            this.setLoading(false);\n        };\n    };\n    public dispose() {\n        this.searchDisposer?.();\n    }\n\n    public get top5Movies() {\n        return this.movies\n            .slice()\n            .sort((l, r) => l.popularity - r.popularity)\n            .slice(0, 4);\n    }\n    public get OrderMovies() {\n        return this.top5Movies.slice().sort((a, b) => {\n            return a.title < b.title ? -1 : a.title > b.title ? 1 : 0;\n        })\n    }\n    public get adult() {\n        return this.movies.filter((movie: types.Movie) => movie.adult)\n    }\n\n    public get isSearch() {\n        return this.search.includes(\"Batman\")\n    }\n};"]},"metadata":{},"sourceType":"module"}